@use 'config';
@use 'sass:string';

// BEM support Func
@function selectorToString($selector) {
  $selector: meta.inspect($selector);
  // 去除引号
  $selector: string.slice($selector, 2, -2);

  @return $selector;
}

@function containsModifier($selector) {
  $selector: selectortostring($selector);

  @if string.index($selector, config.$modifier-separator) {
    @return true;
  }

  @return false;
}

@function containWhenFlag($selector) {
  $selector: selectortostring($selector);

  @if string.index($selector, '.' + config.$state-prefix) {
    @return true;
  }

  @return false;
}

@function containPseudoClass($selector) {
  $selector: selectortostring($selector);

  @if string.index($selector, ':') {
    @return true;
  }

  @return false;
}

@function hitAllSpecialNestRule($selector) {
  @return containsModifier($selector) or containWhenFlag($selector) or
    containPseudoClass($selector);
}

// join var name
// joinVarName(('button', 'text-color')) => '--el-button-text-color'
@function joinVarName($list) {
  $name: '--' + config.$namespace;

  @each $item in $list {
    @if $item != '' {
      $name: $name + '-' + $item;
    }
  }

  @return $name;
}

// getCssVar('button', 'text-color') => var(--el-button-text-color)
@function getCssVar($args...) {
  @return var(#{joinVarName($args)});
}

@function bem($block, $element: '', $modifier: '') {
  $name: config.$namespace + config.$common-separator + $block;

  @if $element != '' {
    $name: $name + config.$element-separator + $element;
  }

  @if $modifier != '' {
    $name: $name + config.$modifier-separator + $modifier;
  }

  @return $name;
}
